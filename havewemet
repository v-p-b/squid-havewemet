#!/usr/bin/env python3
import sys
import sqlite3
import uuid
from urllib.parse import (
    unquote,
    urlparse,
    urlunparse,
    urlencode,
    parse_qsl,
    ParseResult,
)

TOKEN_NAME = "HAVEWEMETUUID"
ENFORCE = True

# Wrapper class to hide DB implementation
class DbConnector(object):
    def __init__(self):
        self.con = sqlite3.connect(":memory:")
        self.con.execute(
            "create table if not exists netlocs(netloc varchar(255) unique)"
        )
        self.con.execute("create table if not exists tokens(token char(36))")
        self.con.execute("create table if not exists sessions(hash char(64), time timestamp default current_timestamp)")

        self.con.execute("create unique index if not exists netloc_idx on netlocs(netloc)")
        self.con.execute("create unique index if not exists token_idx on tokens(token)")
        self.con.execute("create unique index if not exists sess_idx on sessions(hash)")
    def getNetloc(self, netloc):
        with self.con:
            res = self.con.execute("select * from netlocs where netloc = ? ", [netloc])
            if res.fetchone() is None:
                return False
            else:
                return True

    def addNetloc(self, netloc):
        with self.con:
            self.con.execute("insert or ignore into netlocs(netloc) values (?)", [netloc])

    def addToken(self, token):
        with self.con:
            self.con.execute("insert into tokens(token) values (?)", [token])

    def getToken(self, token):
        with self.con:
            res = self.con.execute("select * from tokens where token = ? ", [token])
            if res.fetchone() is None:
                return False
            else:
                self.con.execute("delete from tokens where token = ? ", [token])
                return True

    def getSession(self, h):
        with self.con:
            self.con.execute("delete from sessions where time < datetime('now', '-1 minute')")
            res = self.con.execute("select * from sessions where hash = ?", [h])
            if res.fetchone() is None:
                return False
            else:
                return True
        pass

    def addSession(self, h):
        with self.con:
            self.con.execute("insert or ignore into sessions(hash) values (?)", [h])


db = DbConnector()

while True:
    info = sys.stdin.readline()
    url = unquote(info.split(" ")[0].strip())
    url_parsed = urlparse(url)
    query = dict(parse_qsl(url_parsed.query))
    netloc = url_parsed.netloc
    sess_hash=""
    if (not ENFORCE) or (TOKEN_NAME in query) or db.getSession(sess_hash):
        if (not ENFORCE) or (db.getToken(query[TOKEN_NAME])) or db.getSession(sess_hash):
            db.addNetloc(netloc)
            print("OK", flush=True)
        else:
            # TODO Alert?
            pass
    elif db.getNetloc(netloc):
        print("OK", flush=True)
    else:
        hwm_uuid = str(uuid.uuid4())
        query.update({TOKEN_NAME: hwm_uuid})
        new_url = ParseResult(
            url_parsed.scheme,
            url_parsed.netloc,
            url_parsed.path,
            url_parsed.params,
            urlencode(query),
            url_parsed.fragment,
        ).geturl() # Let's hope this can't introduce XSS :P
        db.addToken(hwm_uuid)
        print("ERR message=%s" % (new_url), flush=True)
con.close()
